#---- ORM

ORM = é uma técnica para aproximar o paradigma de desenvolvimento de aplicações orientadas a objetos ao paradigma do banco de dados relacional

Blibioteca

ORM = Object Relational Mapper
Mapeamento objeto-relacional


Configurar um codigo para um ou varios banco de dados

npm install --save sequelize ---> instalar orm sequelize

npm install --save -dev @types/sequelize ---> instalar os types do orm sequelize

npm install mysql2 ---> instalar o gerenciador de banco de dados mysql



#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS MYSQL

criar uma pasta chamada "instances" para guardar minhas instancias de banco de dados

colocar os dados dentro do arquivo .env

criar um arquivo chamdo mysql.ts


dentro do arquivo .env

PORT=4000

MYSQL_DB=teste
MYSQL_USER=root
MYSQL_PASSWORD= senha padrão do álife
MYSQL_PORT=3306



dentro do arquivo mysql.ts


import {Sequelize} from 'sequelize' --> importar o orm sequelize
import dotenv from 'dotenv' --> importar as variaveis de ambiente do env

dotenv.config() --> habilitar config delas


export const sequelize = new Sequelize( ---> usando o sequelize, especificando dados do banco
    process.env.MYSQL_DB as string, ---> especificando o schema que pode ser uma string ou undefined 
    process.env.MYSQL_USER as string, ---> especificando o usuario
    process.env.MYSQL_PASSWORD as string, ---> especificando a senha
    {
         dialect:'mysql', ---> qual banco de dados vou usar
         port:parseInt(process.env.MYSQL_PORT as string)  ---> a porta do banco de dados, o env retorna uma string, por isso o uso do parseInt
    }
)



OBSERVAÇÃO = manipulação de codigo usando sequelize em grande maioria é baseado em promesas.

dentro server.ts

import {sequelize} from '../src/instances/mysql' ---> importo a função sequelize que contem as especificações de conexão, do arquivo mysql, da pasta instances


server.get('/', async (req:Request,res:Response)=>{  ---> digo que a minha função req e res é do tipo assincrona, devo esperar o processamento de algo para mostrar o resultado
     
    try{ --> se a conexão for bem sucedida
      await sequelize.authenticate()  ---> espera a autenticação dos dados especificados no arquivo mysql.ts
      console.log('Conexão estabelecida com sucesso') ---> se der certo manda que a conexão foi bem sucedida
      res.send('<h1> olá menor </h1>') ---> e mostra a pagina inicial
    }
    catch (error){  --> se a conexão for mau sucedida
        console.log('Deu error',error) ---> mostra qual foi o erro
    }
  
})













#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS POSTGRESQL


são os mesmos passos do mysql

instalar o manipulador do postgres ---> npm install pg pg-hstore

variavies de ambiente

PG_DB=postgres
PG_USER=postgres
PG_PASSWORD=senha padrão do alife
PG_PORT=5432



criar um arquivo pg.ts na pasta instances

import { Sequelize } from "sequelize";
import dotenv from 'dotenv'
dotenv.config()
export const sequelize = new Sequelize(

        process.env.PG_DB as string,
        process.env.PG_USER as string,
        process.env.PG_PASSWORD as string,
        {
            dialect:'postgres',
            port:parseInt(process.env.PG_PORT as string)
        }
)


fazer teste de conexão

server.get('/', async (req:Request,res:Response)=>{
     
    try{
      await sequelize.authenticate()
      console.log('Conexão estabelecida com sucesso')
      res.send('<h1> olá menor </h1>')
    }
    catch (error){
        console.log('Deu error',error)
    }
  
})











#--CONSULTANDO DADOS NO MODEL

extends = herdar caracteristicas,atributos de outra classe.



model =  Essa classe representa uma tabela no banco de dados e define suas colunas como propriedades da classe. O modelo do Sequelize também define os relacionamentos entre tabelas através de associações.



DataTypes =   para representar os tipos de dados suportados pelos bancos de dados relacionais, são usados na definição dos modelos do Sequelize para especificar os tipos de dados das colunas nas tabelas do banco de dados.




dentro do model eu crio um arquivo chamado User.ts



User.ts


import {Model,DataTypes} from 'sequelize'          --> preciso importar o model do sequelize e os datatypes
import {sequelize} from '../instances/mysql'       --> preciso importar minha conexão com o mysql


interface UserInstance extends Model{   ---> tipar os dados que vão vir do banco
    id:number,
    name:string,
    age:number
}


##OBSERVAÇÃO ---> os campos e a tableName precisam estar iguais ao do banco de dados, se não, ocorrerar erro.

export const User = sequelize.define<UserInstance>("User",{ ----> define um modelo de usuário (User) usando o Sequelize para interagir com um banco de dados relacional, é tipando os dados
    id:{                            ----> O campo da Tabela User, possui um id que é primary key e tambem um inteiro
        primaryKey:true,
        type:DataTypes.INTEGER,
    },
    nameUser:{			  ------> O campo da tabela User, possui uma nome de usuario que é do tipo string
        type:DataTypes.STRING
    },
    ageUser:{                  ----- > O campo da tabela User, possui uma idade do Usuario que é do tipo inteiro, e se não for informado nada o usuario tem por padrão 18
        type:DataTypes.INTEGER,
        defaultValue:18
    }
},{
    tableName:'users',      ---> especifco que o modelo de usuario 'User' faz referencia a tabelar  'users' do banco de dados
    timestamps:false     ----> Desativa a criação automática das colunas createdAt e updatedAt, que registram a data de criação e modificação de um registro, respectivamente.
})


//createdAt
//updatedAt




## EXIBINDO TODOS OS USUARIOS DO BANCO

import { User } from './models/User' ---> importando a constante User do model

server.get('/', async (req:Request,res:Response)=>{
  try {
    let users = await User.findAll() ---> pegando todos os campos
    
    res.render('pages/home',{
       users    ---> mandando para o mustache
    })
  }
  catch(error){
    console.log(error)
  }
  
})





home.mustache

<ul>
{{#users}}
    <li style='list-style-type:none'>{{nameUser}} - Idade:{{ageUser}}</li>
{{/users}}
</ul>







#--TIPOS DE CONSULTA


import { User } from './models/User' ---> importar a tabela User do models User
import { Op } from 'sequelize' ----> importar as operações de busca do sequelize


server.get('/',(req:Request,res:Response)=>{


let user = await User.findAll() ---> tras todas as linhas e colunas do banco de dados



let user = awaite User.findAll({
   attributes:{exclude:['id','ageUser']} ---> busque todas as colunas, mas ignore o id e a ageUser
 })



where:{nameUser:'Paulo',ageUser:55} ---> quero apenas a linha que tenha o nameUser 'Paulo' e que a idade ageUser essa operação retorna apenas o que foi especificado


where:{nameUser:['Paulo','Chico'],ageUser:[55,30]} ---> caso eu queira especificar mais
se algum desses dados estiver errado, o retorno sera apenas dos dados que são certos

[Op.or]:[
  
  {ageUser:55}, --> caso tenha a idade 55 ou 30 , retorne  a linha delas
  {ageUser:30}

]

  ageUser:{
        [Op.or]:[55,15] ---> outra maneira de fazer, retorna as linha em que a idade do usuario e 55 ou 15
      }



  where:{
    ageUser:{  
    [Op.between] : [15,55] ---> retorne as linhas que tem as idades entre 15 e 55
}


 nameUser:{
         [Op.endsWith]:['a'] ---> retorne as linhas que o nome do usuario termine com 'a'
     }

})







#---TIPOS DE CONSULTA 2

where:{
 ageUser:{
        [Op.gt]:40, // > 40 quero os usuarios maiores que 40 anos.  
        [Op.gte]40, // >= 40  quero usuario com a idade maior ou igual a 40
        [Op.lt]:40, // < 40 quero os usuarios com a idade menor que 40 anos
        [Op.lte], // <= 40  quero os usuarios com a idade menor ou igual a 40 anos
       }
}




POSSO COMBINAR OPERADORES 

where:{

	ageUser:{
		[Op.lte]:70,       ---> quero os usuarios que tenha a idade maior igual a 40 e menor igual a 70
		[Op.gte]:40

	}	

}


where:{

	ageUser:{
		
	 	[Op.between]:[40,70] ----> outra maneira de fazer

	}	

}


where:{
 ageUser:{
         [Op.notBetween]:[40,70] ---> quero os usuarios que as idades não estão entre 40 e 70
       }
}


gt --> greater than

gte --> greater than equal

lt --> lower than

lte --> lower than equal


where:{
 
 ageUser:{
	[Op.in]:[30,55] --> retorna os usuarios que tenham a idade 30 ou 55
 }

}


where:{
 
 ageUser:{
	[Op.notIn]:[30,55] --> retorna os usuarios que não tenham a idade 30 ou 55
 }

}







where:{

   nameUser:{
	[Op.like]:'%a' ----> retorna os usuarios que terminam com a letra 'a'
	}

}


where:{

   nameUser:{
	[Op.like]:'a%' ---> retorna os usuarios que começam com a letra 'a'
	}

}




where:{

   nameUser:{
	[Op.like]:'%a%'  ---> retorna todos os usuarios que tenha a letra a
	}

}


OBSERVAÇÃO ---> para pegar algo do usuario, crie uma template string







#--ORDENANDO RESULTADOS

where:{
 
  condições

},
order:['nameUser'] ---> ordenar de forma ascendente o nome dos usuario

order:[
   ['nameUser','DESC']   ---> ordenar de forma decrescente o nome do usuario
]


order:[
	['ageUser','DESC'] ---> ordenar as idades do usuario de forma decrescente
]


OBSERVAÇÃO --> SÓ PODE TER UM ORDER







#-- LIMITANDO RESULTADOS


offset --> pular resultado

limit --> limitar resultado



let users = await findAll({
  offset:1, ---> pula 1 resultado 
  limit:2  ---> mostra apenas 2 resultados do banco
})






#INSERINDO DADOS COM SEQUELIZE


usando o user.build ele cria uma instancia do usuario no node, quando uso o user.save eu mando essa instancia verdadeiramente pro banco

OBSERVAÇÃO --> esse metodo é bom para quando eu for fazer alguma manipualção para depois colocar no usuario para posteriormente mandar para o banco

Exemplo: atraves de um input com o formato dd/mm/ano calcular a idade do usuario e depois mandar para o build, para posteriormente salvar no banco 

const user = User.build({
       nameUser:'Karine',
       ageUser:25
    })
   
    await user.save()
    console.log(user.name)


--> usando o metodo create ele cria o usuario instantaneamente
    const user = await User.create({     
       nameUser:'Ciclano',
       ageUser:39
    })

