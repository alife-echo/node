#---- ORM

ORM = é uma técnica para aproximar o paradigma de desenvolvimento de aplicações orientadas a objetos ao paradigma do banco de dados relacional

Blibioteca

ORM = Object Relational Mapper
Mapeamento objeto-relacional


Configurar um codigo para um ou varios banco de dados

npm install --save sequelize ---> instalar orm sequelize

npm install --save -dev @types/sequelize ---> instalar os types do orm sequelize

npm install mysql2 ---> instalar o gerenciador de banco de dados mysql



#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS MYSQL

criar uma pasta chamada "instances" para guardar minhas instancias de banco de dados

colocar os dados dentro do arquivo .env

criar um arquivo chamdo mysql.ts


dentro do arquivo .env

PORT=4000

MYSQL_DB=teste
MYSQL_USER=root
MYSQL_PASSWORD= senha padrão do álife
MYSQL_PORT=3306



dentro do arquivo mysql.ts


import {Sequelize} from 'sequelize' --> importar o orm sequelize
import dotenv from 'dotenv' --> importar as variaveis de ambiente do env

dotenv.config() --> habilitar config delas


export const sequelize = new Sequelize( ---> usando o sequelize, especificando dados do banco
    process.env.MYSQL_DB as string, ---> especificando o schema que pode ser uma string ou undefined 
    process.env.MYSQL_USER as string, ---> especificando o usuario
    process.env.MYSQL_PASSWORD as string, ---> especificando a senha
    {
         dialect:'mysql', ---> qual banco de dados vou usar
         port:parseInt(process.env.MYSQL_PORT as string)  ---> a porta do banco de dados, o env retorna uma string, por isso o uso do parseInt
    }
)



OBSERVAÇÃO = manipulação de codigo usando sequelize em grande maioria é baseado em promesas.

dentro server.ts

import {sequelize} from '../src/instances/mysql' ---> importo a função sequelize que contem as especificações de conexão, do arquivo mysql, da pasta instances


server.get('/', async (req:Request,res:Response)=>{  ---> digo que a minha função req e res é do tipo assincrona, devo esperar o processamento de algo para mostrar o resultado
     
    try{ --> se a conexão for bem sucedida
      await sequelize.authenticate()  ---> espera a autenticação dos dados especificados no arquivo mysql.ts
      console.log('Conexão estabelecida com sucesso') ---> se der certo manda que a conexão foi bem sucedida
      res.send('<h1> olá menor </h1>') ---> e mostra a pagina inicial
    }
    catch (error){  --> se a conexão for mau sucedida
        console.log('Deu error',error) ---> mostra qual foi o erro
    }
  
})


#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS POSTGRESQL


são os mesmos passos do mysql



variavies de ambiente

PG_DB=postgres
PG_USER=postgres
PG_PASSWORD=senha padrão do alife
PG_PORT=5432



criar um arquivo pg.ts

import { Sequelize } from "sequelize";
import dotenv from 'dotenv'
dotenv.config()
export const sequelize = new Sequelize(

        process.env.PG_DB as string,
        process.env.PG_USER as string,
        process.env.PG_PASSWORD as string,
        {
            dialect:'postgres',
            port:parseInt(process.env.PG_PORT as string)
        }
)


fazer teste de conexão

server.get('/', async (req:Request,res:Response)=>{
     
    try{
      await sequelize.authenticate()
      console.log('Conexão estabelecida com sucesso')
      res.send('<h1> olá menor </h1>')
    }
    catch (error){
        console.log('Deu error',error)
    }
  
})




