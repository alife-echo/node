#---- ORM

ORM = é uma técnica para aproximar o paradigma de desenvolvimento de aplicações orientadas a objetos ao paradigma do banco de dados relacional

Blibioteca

ORM = Object Relational Mapper
Mapeamento objeto-relacional


Configurar um codigo para um ou varios banco de dados

npm install --save sequelize ---> instalar orm sequelize

npm install --save -dev @types/sequelize ---> instalar os types do orm sequelize

npm install mysql2 ---> instalar o gerenciador de banco de dados mysql



#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS MYSQL

criar uma pasta chamada "instances" para guardar minhas instancias de banco de dados

colocar os dados dentro do arquivo .env

criar um arquivo chamdo mysql.ts


dentro do arquivo .env

PORT=4000

MYSQL_DB=teste
MYSQL_USER=root
MYSQL_PASSWORD= senha padrão do álife
MYSQL_PORT=3306



dentro do arquivo mysql.ts


import {Sequelize} from 'sequelize' --> importar o orm sequelize
import dotenv from 'dotenv' --> importar as variaveis de ambiente do env

dotenv.config() --> habilitar config delas


export const sequelize = new Sequelize( ---> usando o sequelize, especificando dados do banco
    process.env.MYSQL_DB as string, ---> especificando o schema que pode ser uma string ou undefined 
    process.env.MYSQL_USER as string, ---> especificando o usuario
    process.env.MYSQL_PASSWORD as string, ---> especificando a senha
    {
         dialect:'mysql', ---> qual banco de dados vou usar
         port:parseInt(process.env.MYSQL_PORT as string)  ---> a porta do banco de dados, o env retorna uma string, por isso o uso do parseInt
    }
)



OBSERVAÇÃO = manipulação de codigo usando sequelize em grande maioria é baseado em promesas.

dentro server.ts

import {sequelize} from '../src/instances/mysql' ---> importo a função sequelize que contem as especificações de conexão, do arquivo mysql, da pasta instances


server.get('/', async (req:Request,res:Response)=>{  ---> digo que a minha função req e res é do tipo assincrona, devo esperar o processamento de algo para mostrar o resultado
     
    try{ --> se a conexão for bem sucedida
      await sequelize.authenticate()  ---> espera a autenticação dos dados especificados no arquivo mysql.ts
      console.log('Conexão estabelecida com sucesso') ---> se der certo manda que a conexão foi bem sucedida
      res.send('<h1> olá menor </h1>') ---> e mostra a pagina inicial
    }
    catch (error){  --> se a conexão for mau sucedida
        console.log('Deu error',error) ---> mostra qual foi o erro
    }
  
})













#-- CRIAR UMA CONEXÃO COM O BANCO DE DADOS POSTGRESQL


são os mesmos passos do mysql

instalar o manipulador do postgres ---> npm install pg pg-hstore

variavies de ambiente

PG_DB=postgres
PG_USER=postgres
PG_PASSWORD=senha padrão do alife
PG_PORT=5432



criar um arquivo pg.ts na pasta instances

import { Sequelize } from "sequelize";
import dotenv from 'dotenv'
dotenv.config()
export const sequelize = new Sequelize(

        process.env.PG_DB as string,
        process.env.PG_USER as string,
        process.env.PG_PASSWORD as string,
        {
            dialect:'postgres',
            port:parseInt(process.env.PG_PORT as string)
        }
)


fazer teste de conexão

server.get('/', async (req:Request,res:Response)=>{
     
    try{
      await sequelize.authenticate()
      console.log('Conexão estabelecida com sucesso')
      res.send('<h1> olá menor </h1>')
    }
    catch (error){
        console.log('Deu error',error)
    }
  
})











#--CONSULTANDO DADOS NO MODEL

extends = herdar caracteristicas,atributos de outra classe.



model =  Essa classe representa uma tabela no banco de dados e define suas colunas como propriedades da classe. O modelo do Sequelize também define os relacionamentos entre tabelas através de associações.



DataTypes =   para representar os tipos de dados suportados pelos bancos de dados relacionais, são usados na definição dos modelos do Sequelize para especificar os tipos de dados das colunas nas tabelas do banco de dados.




dentro do model eu crio um arquivo chamado User.ts



User.ts


import {Model,DataTypes} from 'sequelize'          --> preciso importar o model do sequelize e os datatypes
import {sequelize} from '../instances/mysql'       --> preciso importar minha conexão com o mysql


interface UserInstance extends Model{   ---> tipar os dados que vão vir do banco
    id:number,
    name:string,
    age:number
}


##OBSERVAÇÃO ---> os campos e a tableName precisam estar iguais ao do banco de dados, se não, ocorrerar erro.

export const User = sequelize.define<UserInstance>("User",{ ----> define um modelo de usuário (User) usando o Sequelize para interagir com um banco de dados relacional, é tipando os dados
    id:{                            ----> O campo da Tabela User, possui um id que é primary key e tambem um inteiro
        primaryKey:true,
        type:DataTypes.INTEGER,
    },
    nameUser:{			  ------> O campo da tabela User, possui uma nome de usuario que é do tipo string
        type:DataTypes.STRING
    },
    ageUser:{                  ----- > O campo da tabela User, possui uma idade do Usuario que é do tipo inteiro, e se não for informado nada o usuario tem por padrão 18
        type:DataTypes.INTEGER,
        defaultValue:18
    }
},{
    tableName:'users',      ---> especifco que o modelo de usuario 'User' faz referencia a tabelar  'users' do banco de dados
    timestamps:false     ----> Desativa a criação automática das colunas createdAt e updatedAt, que registram a data de criação e modificação de um registro, respectivamente.
})


User.sync() - Isso cria a tabela se ela não existir (e não faz nada se ela já existir)
User.sync({ force: true }) - Isso cria a tabela, soltando-a primeiro se ela já existia
User.sync({ alter: true }) - Isso verifica qual é o estado atual da tabela no banco de dados (quais colunas ela tem, quais são seus tipos de dados, etc.) e, em seguida, executa as alterações necessárias na tabela para que ela corresponda ao modelo.

User.sync()
  .then(() => {
    console.log('Tabela Usuarios criada com sucesso!');
  })
  .catch((error) => {
    console.error('Erro ao criar tabela Usuarios:', error);
  });


//createdAt
//updatedAt




## EXIBINDO TODOS OS USUARIOS DO BANCO

import { User } from './models/User' ---> importando a constante User do model

server.get('/', async (req:Request,res:Response)=>{
  try {
    let users = await User.findAll() ---> pegando todos os campos
    
    res.render('pages/home',{
       users    ---> mandando para o mustache
    })
  }
  catch(error){
    console.log(error)
  }
  
})





home.mustache

<ul>
{{#users}}
    <li style='list-style-type:none'>{{nameUser}} - Idade:{{ageUser}}</li>
{{/users}}
</ul>







#--TIPOS DE CONSULTA


import { User } from './models/User' ---> importar a tabela User do models User
import { Op } from 'sequelize' ----> importar as operações de busca do sequelize


server.get('/',(req:Request,res:Response)=>{


let user = await User.findAll() ---> tras todas as linhas e colunas do banco de dados



let user = awaite User.findAll({
   attributes:{exclude:['id','ageUser']} ---> busque todas as colunas, mas ignore o id e a ageUser
 })



where:{nameUser:'Paulo',ageUser:55} ---> quero apenas a linha que tenha o nameUser 'Paulo' e que a idade ageUser essa operação retorna apenas o que foi especificado


where:{nameUser:['Paulo','Chico'],ageUser:[55,30]} ---> caso eu queira especificar mais
se algum desses dados estiver errado, o retorno sera apenas dos dados que são certos

[Op.or]:[
  
  {ageUser:55}, --> caso tenha a idade 55 ou 30 , retorne  a linha delas
  {ageUser:30}

]

  ageUser:{
        [Op.or]:[55,15] ---> outra maneira de fazer, retorna as linha em que a idade do usuario e 55 ou 15
      }



  where:{
    ageUser:{  
    [Op.between] : [15,55] ---> retorne as linhas que tem as idades entre 15 e 55
}


 nameUser:{
         [Op.endsWith]:['a'] ---> retorne as linhas que o nome do usuario termine com 'a'
     }

})







#---TIPOS DE CONSULTA 2

where:{
 ageUser:{
        [Op.gt]:40, // > 40 quero os usuarios maiores que 40 anos.  
        [Op.gte]40, // >= 40  quero usuario com a idade maior ou igual a 40
        [Op.lt]:40, // < 40 quero os usuarios com a idade menor que 40 anos
        [Op.lte], // <= 40  quero os usuarios com a idade menor ou igual a 40 anos
       }
}




POSSO COMBINAR OPERADORES 

where:{

	ageUser:{
		[Op.lte]:70,       ---> quero os usuarios que tenha a idade maior igual a 40 e menor igual a 70
		[Op.gte]:40

	}	

}


where:{

	ageUser:{
		
	 	[Op.between]:[40,70] ----> outra maneira de fazer

	}	

}


where:{
 ageUser:{
         [Op.notBetween]:[40,70] ---> quero os usuarios que as idades não estão entre 40 e 70
       }
}


gt --> greater than

gte --> greater than equal

lt --> lower than

lte --> lower than equal


where:{
 
 ageUser:{
	[Op.in]:[30,55] --> retorna os usuarios que tenham a idade 30 ou 55
 }

}


where:{
 
 ageUser:{
	[Op.notIn]:[30,55] --> retorna os usuarios que não tenham a idade 30 ou 55
 }

}







where:{

   nameUser:{
	[Op.like]:'%a' ----> retorna os usuarios que terminam com a letra 'a'
	}

}


where:{

   nameUser:{
	[Op.like]:'a%' ---> retorna os usuarios que começam com a letra 'a'
	}

}




where:{

   nameUser:{
	[Op.like]:'%a%'  ---> retorna todos os usuarios que tenha a letra a
	}

}


OBSERVAÇÃO ---> para pegar algo do usuario, crie uma template string







#--ORDENANDO RESULTADOS

where:{
 
  condições

},
order:['nameUser'] ---> ordenar de forma ascendente o nome dos usuario

order:[
   ['nameUser','DESC']   ---> ordenar de forma decrescente o nome do usuario
]


order:[
	['ageUser','DESC'] ---> ordenar as idades do usuario de forma decrescente
]


OBSERVAÇÃO --> SÓ PODE TER UM ORDER







#-- LIMITANDO RESULTADOS


offset --> pular resultado

limit --> limitar resultado



let users = await findAll({
  offset:1, ---> pula 1 resultado 
  limit:2  ---> mostra apenas 2 resultados do banco
})






#INSERINDO DADOS COM SEQUELIZE




usando o user.build ele cria uma instancia do usuario no node, quando uso o user.save eu mando essa instancia verdadeiramente pro banco

OBSERVAÇÃO --> esse metodo é bom para quando eu for fazer alguma manipualção para depois colocar no usuario para posteriormente mandar para o banco

Exemplo: atraves de um input com o formato dd/mm/ano calcular a idade do usuario e depois mandar para o build, para posteriormente salvar no banco 

const user = User.build({
       nameUser:'Karine',
       ageUser:25
    })	
   
    await user.save()
    console.log(user.name)


--> usando o metodo create ele cria o usuario instantaneamente
    const user = await User.create({     
       nameUser:'Ciclano',
       ageUser:39
    })









#-- ATUALIZANDO DADOS DO SEQUELIZE  1-MANEIRA


update = metodo utilizado para atualizar algo no banco
update --> recebe dois argumentos

     //dados para atualizar,codição de localização de linha no banco
await User.update({},{})

await User.update({nameUser:'Bob Richard',ageUser:10},{
  where:{
	id:4			---> Muda o nome e atualiza a idade do usuario com id 4
  }
})


await User.update({ageUser:18},{
  where:{
  ageUser:{
    [Op.lt]:18 ---- > coloca a idade para 18 de todos os usuarios que tenham a idade menor que 18
 }	 
}
})





#-- ATUALIZANDO DADOS SEQUELIZE 2-MANEIRA


A 2 maneira consiste em usar o findAll e uma condição dentro dele, e depois pegar o indice do objeto retornado da condição , e modifica-lo acessando seus atributos



let users = await User.findAll({
      where:{
         id:7       --> de todos os usuarios, quero retornar apenas o de contenha o id 7
      }
   })
   if(users.length > 0){        ---> se esse usuario existir
       let usuario = users[0]     ---- > acesse o indice dele
       usuario.ageUser+=1 	  ----> aumente sua idade
       await usuario.save()   ----> salve no banco a alteração
   }



# OBSERVAÇÃO ---> Só posso modificar, um indice  de todos os objetos do banco 

acesso o indice do array e modifico ele. por isso o let usuario = users[0]




#DELETANDO DADOS COM SEQUELIZE


lte = menor igual a

Deletar todos os usuarios que tenham a idade menor ou igual a 18

 await User.destroy({
    where:{
       ageUser:{
          [Op.lte] : 18        ---> DELETANDO VARIAS LINHAS ATRAVES DE UMA CONDIÇÃO
       }
    }
  })
 


   let users = await User.findAll({
      where:{id:6}                 ----> Acessando um usuario  atraves de uma codição
   })
   if(users.length>0){ se esse usuario existir
      let usuario = users[0] acessa o indice dele
      await usuario.destroy() e deleta esse usuario
   }








# MÉTODOS FINDER



findOne({})


// procura apenas a primeira ocorrencia de um elemento

let users = await User.findOne({ // busca a primeira ocorrencia
    where:{
       ageUser:{
          [Op.gt]:18  ---> vai retornar o primeiro usuario que tenha a idade maior  que  18
       }
    }
})




findByPk() ---> faz a busca de um usuario pelo id

let users = await User.findByPk(7) --> busca o usuario com id 7







findOrCreate({}) --> procura o usuario se existir ele retorna, mas se não existir, ele cria o usuario no banco



users == vai armazenar o usuario
created == vai armazenar um valor booleano se o usuario foi criado ou não


const [users,created] = await User.findOrCreate({
    where:{
       nameUser:'Bia'    --> procure o usuario com nome 'Bia'
    },
    defaults:{
        nameUser:'Bia', ---> se não achar por padrão crie um usuario chamado Bia com idade de 27 anos
        ageUser:27
    }
})

if(created){
   console.log('Usuario criado com sucesso') ---> caso seja true o usuario foi criado com sucesso
}
else{
   console.log('Usuario encontrado') --> caso seja false, o usuario já existe no banco
}






#-- MÉTODOS GETTER/SETTER


GETTER ---> pegar dados do banco de dados para fazer uma manipulação de exibição, ele é usuado quando essa manipulçao de exibição e global para aquela coluna, quando for pegar algo no banco esse Geteer sempre sera disparada, manipulando apenas a exibição e não dados do banco



SETTER --> colocar dados no banco , manipulação de configuração, ele é usando quando vou inserir algo no banco e colocar uma configuração padrão, quando eu inserir algo no banco, ele  vai modificar algo no banco



export const User = sequelize.define<UserInstance>("User",{
    id:{
        primaryKey:true,
        autoIncrement:true,
        type:DataTypes.INTEGER,
    },
    nameUser:{
        type:DataTypes.STRING,
        get(){ ----> sempre quando eu pegar os nomes no banco, quero retornar esses nomes para exibição de forma maiuscular
            const raw:string = this.getDataValue('nameUser') ---> pega o nome de usuario deste proprio dado
            return raw.toUpperCase() ---> retorna em maiusculo
        }
    },
    ageUser:{
        type:DataTypes.INTEGER,
        defaultValue:18,
        set(value:number){ ---> vou colocar um valor na idade
            if(value < 18){ ---> se o valor da idado for menor que 18
                 value = 18 ---> troca o valor fornecido por 18
            }
             this.setDataValue('ageUser',value) coloca esse valor quando um usuario for inserido é quando satisfazer a condição
        }
    },
    
},{
    tableName:'users',
    timestamps:false
})







# CAMPOS VIRTUAIS 

criar campos fakes,campos que não existem no banco. Com objetivo de manipular dados e  economizar criação de colunas desnecessarias


um campo para pegar  a primeira letra do nome

firstLetterOfName:{ ---> esse campo não existe, logo resultara em erro
      type:DataTypes.VIRTUAL, ---> conserto o erro, especificando que o campo e do tipo virtual
      get(){ ---> pego dados para manipuação de exibição
        let name : string = this.getDataValue('nameUser') ---> pego os nomes dos usuarios
        return name.charAt(0) ---> retorno a primeira letra de todos os nomes
      }   
    },


{{firstLetterOfName}} --> coloco essa variavel dentro do for do mustache, para exibir as primeiras letras do nomes dos usuarios




---  APLICAÇÃO PRATICA


pego o primeiro nome e o ultimo do usuario,armazenando em colunas separadas, preciso criar outra coluna com o nome completo ? --> não

crio um campo virtual para exibir o nome junto com o sobrenome

firstName:{ --> crio a coluna primeiro nome
 type:DataTypes.STRING,  
},
lastName:{
        type:DataTypes.STRING, --- crio a coluna sobrenome
    },
    fullName:{
         type:DataTypes.VIRTUAL, --> crio um campo virtual chamado nome completo
         get(){ --> pego os dados do banco para manipulação de exibição
            return `${this.getDataValue('firstName')} ${this.getDataValue('lastName')}` --> retorno o nome + o sobre nome
         }
    },





#--RELACIONAMENTOS SEQUELIZE



A associação HasOne representa uma relação de um-para-um (1:1), onde um registro em uma tabela está associado a no máximo um registro em outra tabela. (tem um)

Ex: Por exemplo, um usuário pode ter no máximo um perfil.


Diferença:-->com a chave estrangeira sendo definida no modelo de destino ()

A.hasOne(B) --> CHAVE ESTRANGEIRA NO B 




A associação BelongsTo também representa uma relação de um-para-um (1:1), onde um registro em uma tabela está associado a exatamente um registro em outra tabela.(pertence a)

Ex:Por exemplo, um perfil pertence a um usuário.

Diferença : ---> com a chave estrangeira sendo definida no modelo de origem 


A.belongsTo(B) ---> Chave estrangeira na tabela A



A associação HasMany representa uma relação de um-para-muitos (1:N), onde um registro em uma tabela está associado a vários registros em outra tabela.(tem muitos)

Ex:Por exemplo, um usuário pode ter vários posts.

Diferença : --> Chave estrangeira definida no modelo de destino

A.hasMany(B) ---> A tabela B vai receber a chave estrangeira




A associação BelongsToMany representa uma relação de muitos-para-muitos (N:N), onde vários registros em uma tabela estão associados a vários registros em outra tabela, e isso é representado através de uma tabela intermediária (tabela pivô).(pertence a muitos)


Ex:Por exemplo, um usuário pode ter muitos papéis e um papel pode estar associado a muitos usuários. Essa associação requer uma tabela intermediária (tabela pivô) para representar a relação entre as tabelas.






# -- THROUGH (PIVÔ)

No Sequelize, a opção "through" na definição de uma relação Many-to-Many (N:N) permite especificar o nome de uma tabela intermediária existente a ser usada na relação entre dois modelos. A sintaxe geral é:


ModelA.belongsToMany(ModelB, { through: 'TableName' });
ModelB.belongsToMany(ModelA, { through: 'TableName' });


onde "TableName" é o nome da tabela intermediária existente a ser usada na relação entre ModelA e ModelB.

A tabela intermediária especificada em "through" deve ter pelo menos duas colunas: a coluna que representa o ID do modelo A e a coluna que representa o ID do modelo B. O nome dessas colunas padrão segue o padrão de nomenclatura "ModelAId" e "ModelBId", mas você pode alterá-las usando as opções "foreignKey" e "otherKey".







### --- Implementação 

Foo.hasOne(Bar)
Bar.belongsTo(Foo)   ---> Relação 1 para 1 entre A tabela Foo e Bar


Options como um segundo parãmetro da chamada de associação

onDelete e onUpdate ---> especificam a ação que deve ser executada em uma tabela quando uma operação de exclusão ou atualização é executada em uma tabela relacionada.

Foo.hasOne(Bar, {
  onDelete: 'RESTRICT',
  onUpdate: 'RESTRICT'
});
Bar.belongsTo(Foo);

as Opções para o onDelete e onUpdate são :

RESTRICT, CASCADE, NO ACTION, SET DEFAULT and SET NULL.




#on Delete

onDelete: define a ação a ser executada quando uma operação de exclusão é executada na tabela relacionada. O Sequelize suporta as seguintes opções de ação:


CASCADE: exclui automaticamente as linhas relacionadas na tabela filha quando uma linha na tabela pai é excluída.


SET NULL: define automaticamente o valor da coluna estrangeira como null nas linhas da tabela filha quando uma linha na tabela pai é excluída.

RESTRICT: impede que uma linha na tabela pai seja excluída se existirem linhas relacionadas na tabela filha.

NO ACTION: é uma opção padrão que não faz nada.





# --- On Update

onUpdate: define a ação a ser executada quando uma operação de atualização é executada na tabela relacionada. O Sequelize suporta as seguintes opções de ação:

CASCADE: atualiza automaticamente as linhas relacionadas na tabela filha quando uma linha na tabela pai é atualizada.

SET NULL: define automaticamente o valor da coluna estrangeira como null nas linhas da tabela filha quando uma linha na tabela pai é atualizada.

RESTRICT: impede que uma linha na tabela pai seja atualizada se existirem linhas relacionadas na tabela filha.

NO ACTION: é uma opção padrão que não faz nada.




 ---> esse campo fica em manufacturer, para referencia o produto
 product_id:{   ---> criar uma campo de chave estrangeira
        type:DataTypes.INTEGER, --> tipo inteiro
        allowNull:false, ---> precisa ser inserido
        unique:true, ---> aquele id e unico não pode ser repetido
        references:{
             model:'product', --- > referencia a tabela product
             key:'id'     ---> referenciado a chave id
        },
        field:'product_id' ---> faz um link com a chave estragerira gerada no relacionamento entre manufactuer e product
     }







# -- IMPLEMENTAÇÃO MANY TO MANY 


const Movie = sequelize.define('Movie', { name: DataTypes.STRING });
const Actor = sequelize.define('Actor', { name: DataTypes.STRING });

const ActorMovies = sequelize.define('ActorMovies', {
  MovieId: {
    type: DataTypes.INTEGER,
    references: {
      model: Movie, // 'Movies' would also work
      key: 'id'
    }
  },
  ActorId: {
    type: DataTypes.INTEGER,
    references: {
      model: Actor, // 'Actors' would also work
      key: 'id'
    }
  }
});

Movie.belongsToMany(Actor, { through: ActorMovies });
Actor.belongsToMany(Movie, { through: ActorMovies });


