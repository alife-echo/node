##--PRIMEIRO PROJETO

CRIANDO UM PROJETO NODE = npm init

CRIANDO UM PROJETO NODE RAPIDO = npm init -y

EXECUTANDO UM ARQUIVO = node nomeArquivo.js




#--INSTALANDO TYPESCRIPT

INSTALANDO TYPESCRIPT GLOBALMENTE = npm install -g typescript

CRIANDO ARQUIVO DE CONFIGURAÇÃO TS tsconfig.json = tsc --init





#--CONFIGURAÇÃO TYPESCRIPT

INSTALAR TYPES DO TYESPESCRIPT =  npm install --save -dev @types/node

EM TSCONFIG.JSON 

"moduleResulotion":"node" = comando que mostra que typescript vai trabalhar com o node

"outDir": "./dist" = comando que mostra onde sera a saida do javascript

"rootDir": "./src" = comando que mostra onde o ts sera trabalhado

"target": "ES6" = comando que mostra qual ecmascript vou usar

 tsc - w = roda o watchmode, monitora toda as alterações no codigo e transforme em js.




#--SCRIPTS PACKAGE.JSON

NO OBJETO SCRIPTS PORSSO CRIAR ATALHOS

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start":"node dist/index.js", --> npm run start vai rodar o node em um diretorio especificado
    "wts":"tsc -w" --> npm run wts vai rodar o watchmode do ts
  }





#--COMMON JS

module.exports.Nomefunção = Nomefunção  -> exportando uma função em common js

const variavel = require('./Matematica') -> importando um arquivo common js




#--IMPORT EXPORT ECMASCRIPT6

export function () {} = exportando uma função no ecmascript6
import {somar} from './Matematica'
console.log(somar(2,3))  = usando função


export defaut {somar,subtrair} = exportando varias funções de maneira defaut
import Matematica from './Matematica'
Matematica.somar(2,3) = usando função


import * as Matematica from './Matematica' = importando todas as funções e chamando de Matematica do arquivo Matematica
Matematica.somar(2,3) = usando função





#--NODEMON

npm install -g nodemon = comando para instalar monitorador e executor js
nodemon ./dist index.js = executando um arquivo com o nodemon

#--TS-NODE
npm install -g ts-node = comando para instalar executor de typescript globalmente
ts-node ./src index.ts = executando ts-node

nodemon ./src index.ts = ele vai monitorar e  executar apenas o codigo typescript



#--EXPRESS

npm install express = instalando express (maneria facilitada de criar servidores,rotas)
npm install --save @types/express = instalando o auto complete do express


import express, {Request,Response} from 'express' ----> chamando o express é tambem dois tipos de requisição
const server = express()  ----> armazenando a função express em uma variavel
				
       //pagina inicial	 //types req res
server.get('/',(req:Request,res:Response)=>{
       res.send('<h1>Olá</h1>')    -----> na pagina inicial '/' quero que seja enviado uma requisição do tipo response com um titulo do site "Olá"
})


server.listen(80) --> cria o servidor na porta 80





#--ROTAS --> O QUE VEM DEPOIS DO DOMINIO

ROTAS = um caminho que pode levar a paginas,arquivos,midias,videos etc.

ROTAS ESTATICAS = rotas sem alteração, em que sua pagina e conteudo são o mesmo

ROTAS DINAMICAS = rotas com alteração, o template pode ser até o mesmo, mas o conteudo do corpo sera difirente.





#--TRABALHANDO COM ROTAS --> 
 
server.get('rota',(pedido servidor,resposta servidor)=>{
     resposta.send('mensagem que sera enviada para o usuario')
 }) 

GET = requisição para acessar algo acessar algo ao servidor
POST = requsição para mandar algo ao servidor
GET , POST , PUT , DELETE

:nome = sintaxe para rota dinamica

:nome = o usuario digitara algo, o server vai procurar algo relacionado

EXEMPLO: 
           : -> campos que serão digitados pelo usuario

  server.get('/voo/:origem-:destino',(req:Request,res:Response)=>{

    let {origem,destino} = req.params  -> como pegar o que foi digitado pelo usuario 

    res.send(`Procurando voos  de ${origem.toUpperCase()} até ${destino.toUpperCase()}`) -> enviando para o usuario o que foi digitado
})








#---CRIANDO ROTAS COM ROUTER


OBSERVAÇÃO = criar uma pasta "routers" e um arquivo index.ts nela, para guardar nossas rotas principais
OBSERVAÇÃO = dentro da pasta "routers" podemos criar outros arquivos contendo rotas de cada parte especifica do nosso sistema
EXEMPLO = painel --> rotas que são partes do painel





TODO O CODIGO ABAIXO ESTA GUARDADO EM UMA PASTA  ./routers/index

import {Router,Request,Response) from 'express' --> importando o router

const router = Router() --> guardarndo a função router em uma variavel

router.get('/',(req:Request,res:Response)=>{ 
   res.send('Olá')
  })


router.get('/contato',(req:Request,res:Response)=>{
    res.send('Formulário de Contato')
})


router.get('/sobre',(req:Request,res:Response)=>{
     res.send('Página institucional sobre a empresa')
})

export default router






TODO O CODIGO ABAIXO ESTA GUARDADO EM UMA PASTA  ./routers/painel


import {Router,Request,Response} from 'express'

const router = Router()

router.get('/',(req:Request,res:Response)=>{
     res.send('Home Painel')
})

router.get('/formulario',(req:Request,res:Response)=>{
    res.send('Formulário de Cadastro painel')
})


export default router






#--USANDO AS ROTAS CRIADAS NA PASTA routers


import mainRouters from './routers/index'
import painelRouters from './routers/painel'
import express from "express";

const server = express()

server.use(mainRouters) --> não precisa de prefixo porque a rota raiz do site e '/'
server.use('/painel',painelRouters) --> para rotas diferentes crie um prefixo indicando qual é a rota raiz das rotas diferentes, nesse caso é '/painel'


server.listen(80)







#--PÁGINA NÃO ENCONTRADA

caso ele tenha passado pelas rotas principais e não achou o espeficicado, preciso criar uma rota para ultimo recurso, caso na linha de execução o servidor não encontre nada.

server.use(mainRoutes)
server.use('/painel',routerPainel)

não achou nada
res.status(404) = quando a pagina não for encontrada
server.use((req:Request,res:Response)=>{
   res.status(404).send('Página não encontrada!')  -->caso o erro seja 404, envia para o usuario o status que a pagina não foi encontrada 
})





#--PÁGINA PUBLICA E ARQUIVOS ESTATICOS

Criar uma pasta publica e colocar arquivos e pastas para serem acessados pelo o publico externo

---public
--imgs
-google.jpg
--css
-style.css

server.use(express.static('public')) --> vai criar uma rota para a pasta public, podendo ser acessado, com conteudo estatico
posso acessar imgs,estilos,codigos e etc

exemplo : localhost/css/style.css

server.use('/static',express.static('public')) --> (opcional), colocando um prefixo para acessar as pastas

exemplo : localhost/static/css/style.css


--- OBSERVAÇÃO : caso o codigo seja executado na raiz do hd,tratamentos devem ser feitos

import path from 'path' -> import a biblioteca path do node

__dirname = especifica em qual diretorio estou

path.join(__dirname,'../public') -->caso o server esteja dentro da pasta src, comando que mostra o caminho completo para a pasta public
path.join(__dirname,'./public') -->caso o server esteja fora da pasta src, comando que mostra o caminho completo para a pasta public

server.use(express.static(path.join(__dirname,'../public'))) ---> comando que cria uma rota para a pasta publica, mas agora com o camino completo da pasta public, prevensão de erros.



MUSTACHE

npm i mustache-express
npm i --save-dev @types/mustache-express